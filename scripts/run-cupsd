#! /bin/sh

set -e -x

mkdir -p $SNAP_DATA/var/spool/tmp
mkdir -p $SNAP_DATA/var/run/certs
mkdir -p $SNAP_DATA/var/log
mkdir -p $SNAP_DATA/var/cache/fontconfig
mkdir -p $SNAP_COMMON/etc/cups/ppd
mkdir -p $SNAP_COMMON/etc/cups/ssl
mkdir -p $SNAP_COMMON/etc/fonts
mkdir -p $SNAP_COMMON/run

# Set UTF-8
export LC_ALL=C.UTF-8
export LANG=C.UTF-8

# Set a general TMPDIR
export TMPDIR=$SNAP_DATA/tmp
mkdir -p $TMPDIR

# Activate full debug logging of cupsd and libcups
# (Needs "- --enable-debug-printfs" be uncommented in CUPS' configflags
#  in snapcraft.yaml)
#export CUPS_DEBUG_LOG=$SNAP_DATA/var/log/debug_log
#export CUPS_DEBUG_LEVEL=99

# Config file for fontconfig
export FONTCONFIG_FILE=$SNAP_COMMON/etc/fonts/fonts.conf

# Check whether the user and group "snap_daemon" for filters and
# backends exist and the Snap is allowed to use it and only if not run
# filters and backends as root. Note that in a Snap you can only use
# the user "snap_daemon" (UID 584788) for processes which should drop
# the root privileges (daemons or auxiliary processes of daemons, here
# filters and backends). The CUPS user "lp" cannot be used.
# See https://forum.snapcraft.io/t/system-usernames/
# Also check the existence of the "lpadmin" group. Members of this
# group are allowed to do administrative CUPS tasks, like creating
# print queues or deleting other user's jobs. If this group does not
# exist, use the general administration group "adm" instead and go
# root-only for administrative tasks if also this group does not
# exist. On Ubuntu distributions the first user created is in both
# "adm" and "lpadmin" groups.
CUPSUSER=snap_daemon
ALTCUPSUSER=root
CUPSGROUP=snap_daemon
ALTCUPSGROUP=root
CUPSSYSTEMGROUP=lpadmin
ALTCUPSSYSTEMGROUP=adm

TESTFILE=$TMPDIR/testfile
touch $TESTFILE
if ! chown $CUPSUSER $TESTFILE; then
    CUPSUSER=$ALTCUPSUSER;
fi
if ! chgrp $CUPSGROUP $TESTFILE; then
    CUPSGROUP=$ALTCUPSGROUP;
fi
rm -f $TESTFILE

if ! getent group $CUPSSYSTEMGROUP >/dev/null 2>&1; then
    CUPSSYSTEMGROUP=$ALTCUPSSYSTEMGROUP;
    if ! getent group $CUPSSYSTEMGROUP >/dev/null 2>&1; then
	CUPSSYSTEMGROUP=;
    fi
fi

# Create cups-files.conf if not already present
if [ ! -f $SNAP_COMMON/etc/cups/cups-files.conf ]; then
    # Get default cups-files.conf
    CUPSFILESCONF=$SNAP/etc/cups/cups-files.conf
    cp $CUPSFILESCONF $SNAP_COMMON/etc/cups/cups-files.conf
fi

# Set paths for the snap
perl -p -i \
     -e 's:^(\s*\#)?\s*User\s+\S+\s*$:User '"$CUPSUSER"'\n:;' \
     -e 's:^(\s*\#)?\s*Group\s+.*$:Group '"$CUPSGROUP"':;' \
     -e 's:^(\s*\#)?\s*SystemGroup\s+.*$:SystemGroup '"$CUPSSYSTEMGROUP"' root:;' \
     -e 's:^(\s*\#)?\s*AccessLog\s+.*$:AccessLog '"$SNAP_DATA"'/var/log/access_log:;' \
     -e 's:^(\s*\#)?\s*CacheDir\s+.*$:CacheDir '"$SNAP_DATA"'/var/cache:;' \
     -e 's:^(\s*\#)?\s*DataDir\s+.*$:DataDir '"$SNAP"'/share/cups:;' \
     -e 's:^(\s*\#)?\s*DocumentRoot\s+.*$:DocumentRoot '"$SNAP"'/share/doc/cups:;' \
     -e 's:^(\s*\#)?\s*ErrorLog\s+.*$:ErrorLog '"$SNAP_DATA"'/var/log/error_log:;' \
     -e 's:^(\s*\#)?\s*FontPath\s+.*$:FontPath '"$SNAP"'/share/cups/fonts:;' \
     -e 's:^(\s*\#)?\s*PageLog\s+.*$:PageLog '"$SNAP_DATA"'/var/log/page_log:;' \
     -e 's:^(\s*\#)?\s*Printcap\s+.*$:Printcap '"$SNAP_COMMON"'/etc/printcap:;' \
     -e 's:^(\s*\#)?\s*RequestRoot\s+.*$:RequestRoot '"$SNAP_DATA"'/var/spool:;' \
     -e 's:^(\s*\#)?\s*ServerBin\s+.*$:ServerBin '"$SNAP"'/lib/cups:;' \
     -e 's:^(\s*\#)?\s*ServerRoot\s+.*$:ServerRoot '"$SNAP_COMMON"'/etc/cups:;' \
     -e 's:^(\s*\#)?\s*StateDir\s+.*$:StateDir '"$SNAP_DATA"'/var/run:;' \
     -e 's:^(\s*\#)?\s*TempDir\s+.*$:TempDir '"$SNAP_DATA"'/var/spool/tmp:;' \
     $SNAP_COMMON/etc/cups/cups-files.conf
grep -q 'PassEnv FONTCONFIG_FILE' $SNAP_COMMON/etc/cups/cups-files.conf ||
    echo PassEnv FONTCONFIG_FILE >> $SNAP_COMMON/etc/cups/cups-files.conf
# chmod 0640 $SNAP_COMMON/etc/cups/cups-files.conf

# Create cupsd.conf if not already present
if [ ! -f $SNAP_COMMON/etc/cups/cupsd.conf ]; then
    # Get default cupsd.conf
    CUPSDCONF=$SNAP/etc/cups/cupsd.conf
    cat $CUPSDCONF | \
	grep -v 'Listen' | \
	perl -p -e 's:^(\s*<Location\s*/>\s*)$:$1  Allow \@LOCAL\n:' \
	     > $SNAP_COMMON/etc/cups/cupsd.conf

    # No restrictions on size of log file
    echo MaxLogSize 9999999 >> $SNAP_COMMON/etc/cups/cupsd.conf

    # Debug logging
    perl -p -i -e 's:^(\s*)\#?(\s*LogLevel\s+)\S+:\1\2debug:g' $SNAP_COMMON/etc/cups/cupsd.conf

    # chmod 0640 $SNAP_COMMON/etc/cups/cupsd.conf
fi

# Create fonts.conf if not already present
if [ ! -f $SNAP_COMMON/etc/fonts/fonts.conf ]; then
    # Get default fonts.conf
    FONTSCONF=$SNAP/etc/fonts/fonts.conf
    cp $FONTSCONF $SNAP_COMMON/etc/fonts/fonts.conf
fi

# Set paths for the snap
perl -p -i \
     -e 's:<dir>\S*/share/cups/fonts</dir>:<dir>'"$SNAP"'/share/cups/fonts</dir>:;' \
     -e 's:<dir>\S*/usr/share/fonts</dir>:<dir>'"$SNAP"'/share/cups/fonts</dir>:;' \
     -e 's:<cachedir>\S*/var/cache/fontconfig</cachedir>:<cachedir>'"$SNAP_DATA"'/var/cache/fontconfig</cachedir>:;' \
     -e 's:<(cache|)dir>/usr/\S*</(cache|)dir>::;' \
     -e 's:<(cache|)dir>~\S*</(cache|)dir>::;' \
     $SNAP_COMMON/etc/fonts/fonts.conf

# Create snmp.conf if not already present
if [ ! -f $SNAP_COMMON/etc/cups/snmp.conf ]; then
    # Get default snmp.conf
    cp $SNAP/etc/cups/snmp.conf $SNAP_COMMON/etc/cups/
    chmod 644 $SNAP_COMMON/etc/cups/snmp.conf
fi

# Get further default files but do not overwrite existing ones
yes n | cp -ri $SNAP/etc/cups/ppd $SNAP_COMMON/etc/cups/
yes n | cp -ri $SNAP/etc/cups/ssl $SNAP_COMMON/etc/cups/

# Make sure that port and domain socket of this Snap are always used
# Use standard port and domain socket if this is the first CUPS started
# on this system (assumed to be the system's default CUPS)
PORT=631
ALTPORT=10631
DOMAINSOCKET=/run/cups/cups.sock
if [ ! -d /run/cups ]; then
    DOMAINSOCKET=/var/run/cups/cups.sock
fi
ALTDOMAINSOCKET=$SNAP_COMMON/run/cups.sock

# If the standard port 631 is occupied (by a system CUPS installed via
# DEB/RPM/source for example) use alternative port
if $SNAP/scripts/port-occupied $PORT; then
    # CUPS already running, try alternative port
    PORT=$ALTPORT
fi

# If the standard domain socket is in use (by a system CUPS installed via
# DEB/RPM/source for example) or when lpstat errors when querying it
# use alternative domain socket
if ! $SNAP/bin/lpstat -h $DOMAINSOCKET -r || \
   $SNAP/bin/lpstat -h $DOMAINSOCKET -r | grep -qv ' not '; then
    # CUPS already running, try alternative port
    DOMAINSOCKET=$ALTDOMAINSOCKET
fi

# Set the port in cupsd.conf
( cat $SNAP_COMMON/etc/cups/cupsd.conf | grep -v Listen | grep -v Port > $SNAP_COMMON/etc/cups/cupsd.conf.new || true ) && \
    echo Port $PORT > $SNAP_COMMON/etc/cups/cupsd.conf && \
    cat $SNAP_COMMON/etc/cups/cupsd.conf.new >> $SNAP_COMMON/etc/cups/cupsd.conf && \
    rm -f $SNAP_COMMON/etc/cups/cupsd.conf.new

# Set the domain socket in cupsd.conf
( cat $SNAP_COMMON/etc/cups/cupsd.conf | grep -v Listen > $SNAP_COMMON/etc/cups/cupsd.conf.new || true ) && \
    echo Listen $DOMAINSOCKET > $SNAP_COMMON/etc/cups/cupsd.conf && \
    cat $SNAP_COMMON/etc/cups/cupsd.conf.new >> $SNAP_COMMON/etc/cups/cupsd.conf && \
    rm -f $SNAP_COMMON/etc/cups/cupsd.conf.new

# Set the domain socket in client.conf
touch $SNAP_COMMON/etc/cups/client.conf
( cat $SNAP_COMMON/etc/cups/client.conf | grep -v ServerName > $SNAP_COMMON/etc/cups/client.conf.new || true ) && \
    echo ServerName $DOMAINSOCKET > $SNAP_COMMON/etc/cups/client.conf && \
    cat $SNAP_COMMON/etc/cups/client.conf.new >> $SNAP_COMMON/etc/cups/client.conf && \
    rm -f $SNAP_COMMON/etc/cups/client.conf.new

SCHEDULER=cupsd

# Spawn cupsd in a way that we can grab its PID
exec $SCHEDULER -f -s $SNAP_COMMON/etc/cups/cups-files.conf -c $SNAP_COMMON/etc/cups/cupsd.conf &
PID=$!
echo $PID > $SNAP_DATA/var/run/cupsd.pid

# Keep this script running until cupsd terminates
wait $PID

# Remove PID file as process is done
rm -f $SNAP_DATA/var/run/cupsd.pid
